//TODO 请面试者在这里添加自己的代码实现以完成所需功能
		Tokener token(raw_url);
		//private:
		//	const char* m_pData;	//! the source text string to be parsed
		//	const char* m_pCurPos;  //! At first, set it 0
		//	const char* m_pDataEnd; //!
		
		//Skip characters until the next character is the requested character.??????
		//Skip characters up to the character is the requested character............
		//char Tokener::skipTo( char to )
		//{ do{ c = next();} while (c != to);  back(); return c; }
		//======>>>bool Tokener::back() { --m_pCurPos; }
		//======>>>char Tokener::next() { return *m_pCurPos++; }
		//skip to the position of the first '?'
		token.skipTo('?');
		
		
		//what if more than one '?', skip over non-letter
		//like this : { "http://www.microsofttranslator.com/bv.aspx???&from=&to=zh-chs&xxx&query", "" }
		//+++++++++++++++++++this section add to deal with '???&'+++++++++++++++++++++
		for (; !isalpha(token.current()); token.next());
		//token.next(); //skip one char : '?'      This function will make the current position flag move to next position
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		
		std::string key;
		//bool isEnd() const  { return (m_pCurPos >= m_pDataEnd || *m_pCurPos == '\0'); }
		while (!token.isEnd()) {
			//Get the characters up to the next character <code>quote< / code>.
			//while ( *m_pCurPos++ != quote ) { ... }
			//return std::string( startpos, m_pCurPos - startpos - 1 );
			//so, m_pCurPos is the positio behind quote
			key = token.nextString('=');//now, m_pCurPos ======  1 + position'='
			
			//+++++++++++++++++++this section is add to deal with '&xxx&'++++++++++++++
			//if string key include '&'
			if (key.find('&') != std::string::npos)
			{
				token.skipBackTo('&');
				//token.next();
				key = token.nextString('=');
			}
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

			//if find out the 'key' in the set of string keys
			if (keys.find(key) != keys.end()) {
				//Gets size of data that can read from the current read position.---return (s32)(m_pDataEnd - m_pCurPos)
				const char* curpos = token.getCurReadPos();
				int nreadable = token.getReadableSize();

				/**
				* case 1:
				*  raw_url="http://www.microsofttranslator.com/bv.aspx?from=&to=zh-chs&a=http://hnujug.com/&xx=yy"
				*  sub_url="http://hnujug.com/"
				*/
				//return empty string when '&' next to '=', i.e. parameter (char quote) is next to the current position
				//also when there is no '&'
				sub_url = token.nextString('&');//now, m_pCurPos ======  1 + position'&'

				if (sub_url.empty() && nreadable > 0) {
					/**
					* case 2:
					* raw_url="http://www.microsofttranslator.com/bv.aspx?from=&to=zh-chs&a=http://hnujug.com/"
					* sub_url="http://hnujug.com/"
					*/
					assert(curpos);
					sub_url.assign(curpos, nreadable);
					if (sub_url.find('&') != std::string::npos)
						sub_url = std::string();
				}
			}
			
			//if there is no key in set of keys
			token.skipTo('&');
			//skipTo(char):when skip over '\0', m_pCurPos = startIndex;
			token.next();//skip one char : '&'
		}